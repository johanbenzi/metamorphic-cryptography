/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.gui;

import com.bean.FileDownloadBean;
import com.bean.FileTransferBean;
import com.net.ConnectToServer;
import com.transfer.FileDownloadClient;
import com.util.AppConstants;
import com.util.AppVariables;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Administrator
 */
public class InboxDialog extends javax.swing.JDialog {

    /**
     * Creates new form InboxDialog
     */
    private ClientHome parent = null;
    DefaultTableModel tableModel = null;

    public InboxDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.parent = (ClientHome) parent;
        initComponents();
        tableModel = (DefaultTableModel) inboxTable.getModel();
        loadInboxTable();
        setIconImage(new ImageIcon(this.getClass().getResource("/com/icon/met_client_icon.png")).getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inboxPopupMenu = new javax.swing.JPopupMenu();
        downloadMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        inboxTable = new javax.swing.JTable();
        refreshButton = new javax.swing.JButton();

        downloadMenuItem.setText("Download Menu");
        downloadMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadMenuItemActionPerformed(evt);
            }
        });
        inboxPopupMenu.add(downloadMenuItem);

        deleteMenuItem.setText("Delete Menu");
        deleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuItemActionPerformed(evt);
            }
        });
        inboxPopupMenu.add(deleteMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Inbox Form");
        setResizable(false);

        inboxTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Sl No", "From", "Cover File Name", "Cipher FIle Name", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        inboxTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inboxTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(inboxTable);
        inboxTable.getColumnModel().getColumn(0).setResizable(false);
        inboxTable.getColumnModel().getColumn(0).setPreferredWidth(1);

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE)
                    .addComponent(refreshButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(refreshButton)
                .addContainerGap())
        );

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setLocation((screenSize.width-dialogSize.width)/2,(screenSize.height-dialogSize.height)/2);
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        loadInboxTable();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void downloadMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadMenuItemActionPerformed
        int selectedRow = inboxTable.getSelectedRow();
        if (inboxTable.isCellSelected(selectedRow, 1)) {
            FileDownloadBean fdb = new FileDownloadBean();
            fdb.setUsername(AppVariables.userName);
            fdb.setFilename(inboxTable.getValueAt(selectedRow, 3).toString());
            fdb.setDate(inboxTable.getValueAt(selectedRow, 4));

            JFileChooser chooser = new JFileChooser(".");
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int option = chooser.showOpenDialog(this);
            if (option == JFileChooser.APPROVE_OPTION) {
                try {
                    String selectedPath = chooser.getSelectedFile().getAbsolutePath();
                    String response = (String) new ConnectToServer(AppConstants.START_FILE_DOWNLOADING).sendRequestToServer(fdb);
                    JOptionPane.showMessageDialog(this, response, AppConstants.FILE_DOWNLOAD, JOptionPane.INFORMATION_MESSAGE);


                    Thread.sleep(1000);
                    FileDownloadClient downloadClient = new FileDownloadClient(selectedPath, this);
                    new Thread(downloadClient).start();
                } catch (InterruptedException ex) {
                    Logger.getLogger(InboxDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }



    }//GEN-LAST:event_downloadMenuItemActionPerformed

    private void inboxTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inboxTableMouseClicked

        if (evt.isMetaDown()) {
            inboxPopupMenu.show(this, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_inboxTableMouseClicked

    private void deleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuItemActionPerformed
        int selectedRow = inboxTable.getSelectedRow();
        String date = inboxTable.getValueAt(selectedRow, 4).toString();
        if (selectedRow != -1) {
            String response = (String) new ConnectToServer(AppConstants.DELETE_INBOX).sendRequestToServer(AppConstants.DELETE_INBOX + "," + date);
            if (response.equals(AppConstants.DELETION_COMPLETED)) {
                JOptionPane.showMessageDialog(this, "Message deleted Successfully", "Delete Message",
                        JOptionPane.INFORMATION_MESSAGE);
                loadInboxTable();
            }
        }
    }//GEN-LAST:event_deleteMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InboxDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InboxDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InboxDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InboxDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                InboxDialog dialog = new InboxDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenuItem downloadMenuItem;
    private javax.swing.JPopupMenu inboxPopupMenu;
    private javax.swing.JTable inboxTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshButton;
    // End of variables declaration//GEN-END:variables

    private void loadInboxTable() {
        Object response = new ConnectToServer(AppConstants.GET_INBOX).sendRequestToServer(AppConstants.GET_INBOX + "," + AppVariables.userName);
        if (response instanceof ArrayList) {
            ArrayList<FileTransferBean> inboxList = (ArrayList) response;
            while (tableModel.getRowCount() > 0) {
                tableModel.removeRow(0);
            }
            int i = 0;
            for (FileTransferBean bean : inboxList) {
                Object[] data = {++i, bean.getFromAddress(), bean.getCoverFileName(), bean.getCipherFileName(), bean.getDate()};
                tableModel.addRow(data);
            }
        }
    }

    public void notificationStatus() {
        JOptionPane.showConfirmDialog(null, AppConstants.FILE_DOWNLOAD_COMPLETED, AppConstants.FILE_DOWNLOAD,
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
        this.dispose();
    }
}
