/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.gui;

import com.bean.FileTransferBean;
import com.meta.encr.MetamorphicEncryptor;
import com.meta.encr.MetamorphicStegnographer;
import com.net.ConnectToServer;
import com.net.SerializerManager;
import com.transfer.FileTransferClient;
import com.util.AppConstants;
import com.util.AppVariables;
import com.util.ClientValidator;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Administrator
 */
public class EncryptDialog extends javax.swing.JDialog {

    /**
     * Creates new form EncryptDialog
     */
    File coverImageFile = null;
    File ciphermageFile = null;
    int pX = 0;
    int pY = 0;
    private MetamorphicEncryptor encryptor;
    private String username = "";
    private BufferedImage cipherImage;
    int finalImageH = 0;
    int finalImageW = 0;
    int cipherIconHeight = 0;
    int cipherIconWidth = 0;
    private ClientHome parent = null;
    BufferedImage finalImage = null;
    
    public EncryptDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.parent = (ClientHome) parent;
        loadSenderData();
        setIconImage(new ImageIcon(this.getClass().getResource("/com/icon/met_client_icon.png")).getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        encryptPanal = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        encrTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        CoverImgFileTextField = new javax.swing.JTextField();
        coverImgBrowseButton = new javax.swing.JButton();
        encryptButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        pXTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        pYTextField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        cipherZoomButton = new javax.swing.JButton();
        cipherZoomOutButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        cipherImgLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        interTextArea = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        finalZoomButton = new javax.swing.JButton();
        finalZoomOutButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        finalImgLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        clientListComboBox = new javax.swing.JComboBox();
        cancelButton = new javax.swing.JButton();
        sendButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Encrypting Form");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Encryption  Requirments"));

        jLabel1.setText("Text :");

        jLabel3.setText("Cover Image :");

        coverImgBrowseButton.setText("Browse");
        coverImgBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coverImgBrowseButtonActionPerformed(evt);
            }
        });

        encryptButton.setText("Encrypt");
        encryptButton.setEnabled(false);
        encryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("pX :");

        jLabel5.setText("pY :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(pXTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pYTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(encrTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(CoverImgFileTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(coverImgBrowseButton))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(461, Short.MAX_VALUE)
                        .addComponent(encryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encrTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(CoverImgFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(coverImgBrowseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(pXTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(pYTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(encryptButton)
                .addGap(16, 16, 16))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Cipher ImagePreview"));

        cipherZoomButton.setText("ZOOM IN");
        cipherZoomButton.setEnabled(false);
        cipherZoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cipherZoomButtonActionPerformed(evt);
            }
        });

        cipherZoomOutButton.setText("ZOOM OUT");
        cipherZoomOutButton.setEnabled(false);
        cipherZoomOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cipherZoomOutButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(cipherImgLabel);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap(392, Short.MAX_VALUE)
                        .addComponent(cipherZoomButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cipherZoomOutButton)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cipherZoomOutButton)
                    .addComponent(cipherZoomButton)))
        );

        interTextArea.setEditable(false);
        interTextArea.setColumns(20);
        interTextArea.setRows(5);
        interTextArea.setBorder(javax.swing.BorderFactory.createTitledBorder("Intermediate Text"));
        jScrollPane1.setViewportView(interTextArea);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Final Image"));

        finalZoomButton.setText("ZOOM IN");
        finalZoomButton.setEnabled(false);
        finalZoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalZoomButtonActionPerformed(evt);
            }
        });

        finalZoomOutButton.setText("ZOOM OUT");
        finalZoomOutButton.setEnabled(false);
        finalZoomOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalZoomOutButtonActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(finalImgLabel);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap(388, Short.MAX_VALUE)
                        .addComponent(finalZoomButton)
                        .addGap(10, 10, 10)
                        .addComponent(finalZoomOutButton)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(finalZoomButton)
                    .addComponent(finalZoomOutButton))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Send To"));

        jLabel2.setText("Available Clients :");

        cancelButton.setText("CANCEL");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        sendButton.setText("SEND");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clientListComboBox, 0, 457, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 412, Short.MAX_VALUE)
                        .addComponent(cancelButton)
                        .addGap(10, 10, 10)
                        .addComponent(sendButton)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(clientListComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(sendButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout encryptPanalLayout = new javax.swing.GroupLayout(encryptPanal);
        encryptPanal.setLayout(encryptPanalLayout);
        encryptPanalLayout.setHorizontalGroup(
            encryptPanalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(encryptPanalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(encryptPanalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(encryptPanalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(encryptPanalLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        encryptPanalLayout.setVerticalGroup(
            encryptPanalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(encryptPanalLayout.createSequentialGroup()
                .addGap(183, 183, 183)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(encryptPanalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(encryptPanalLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(610, 610, 610)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(encryptPanal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(encryptPanal, javax.swing.GroupLayout.PREFERRED_SIZE, 674, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setSize(new java.awt.Dimension(620, 712));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        if (clientListComboBox.getSelectedItem().equals("Select")) {
            JOptionPane.showMessageDialog(this, "Please select any available clients..!", "Composing Form", JOptionPane.WARNING_MESSAGE);
        } else {
            // BufferedImage bufCoverImage = ImageIO.read(coverImageFile);
            // BufferedImage bufCoverImage = getBufferedImage(coverImageFile);
            FileTransferBean ftb = new FileTransferBean();
            ftb.setCipherImage(new ImageIcon(finalImage));
            ftb.setCoverImage(new ImageIcon(coverImageFile.getAbsolutePath()));
            // ftb.setCoverImage(new ImageIcon(bufCoverImage));
            ftb.setCoverFileName(coverImageFile.getName());
            ftb.setSelectedCoverFile(coverImageFile);
            ftb.setFromAddress(AppVariables.userName);
            ftb.setDate(getDate());
            ftb.setpX(pX);
            ftb.setpY(pY);
            ftb.setToAddress(clientListComboBox.getSelectedItem().toString());
            File serFile = SerializerManager.serializeData(ftb);
            
            String response = (String) new ConnectToServer(AppConstants.FILE_TRANSFER).sendRequestToServer(ftb);
            if (response.equals(AppConstants.STARTING_FILE_TRANSFER)) {
                JOptionPane.showMessageDialog(this, response, "Composing Form", JOptionPane.INFORMATION_MESSAGE);
            }
            
            FileTransferClient client = new FileTransferClient(serFile, getDate(), this);
            new Thread(client).start();
            
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    private void finalZoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalZoomButtonActionPerformed
// TODO add your handling code here:

        if (finalImageH < 1000 && finalImageW < 4000) {
            int newImageWidth = finalImageW * 10;
            int newImageHeight = finalImageH * 10;
            System.out.println(" " + newImageHeight);
            System.out.println(" " + newImageWidth);
            BufferedImage resizedImage = new BufferedImage(newImageWidth, newImageHeight, BufferedImage.TYPE_INT_RGB);
            Graphics2D g = resizedImage.createGraphics();
            g.drawImage(finalImage, 0, 0, newImageWidth, newImageHeight, null);
            g.dispose();
            finalImgLabel.setIcon(new ImageIcon(resizedImage));
            finalImageH = newImageHeight;
            finalImageW = newImageWidth;
        }

    }//GEN-LAST:event_finalZoomButtonActionPerformed

    private void finalZoomOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalZoomOutButtonActionPerformed
        if (finalImageH > 1 && finalImageW > 6) {
            int newImageWidth = finalImageW / 10;
            int newImageHeight = finalImageH / 10;
            System.out.println(" " + newImageHeight);
            System.out.println(" " + newImageWidth);
            BufferedImage resizedImage = new BufferedImage(newImageWidth, newImageHeight, BufferedImage.TYPE_INT_RGB);
            Graphics2D g = resizedImage.createGraphics();
            g.drawImage(finalImage, 0, 0, newImageWidth, newImageHeight, null);
            g.dispose();
            finalImgLabel.setIcon(new ImageIcon(resizedImage));
            finalImageH = newImageHeight;
            finalImageW = newImageWidth;
        }
   }//GEN-LAST:event_finalZoomOutButtonActionPerformed

    private void cipherZoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cipherZoomButtonActionPerformed
// TODO add your handling code here:
        //1000
// 2000
        if (cipherIconHeight < 1000 && cipherIconWidth < 2000) {
            int newImageWidth = cipherIconWidth * 10;
            int newImageHeight = cipherIconHeight * 10;
            System.out.println(" " + newImageHeight);
            System.out.println(" " + newImageWidth);
            BufferedImage resizedImage = new BufferedImage(newImageWidth, newImageHeight, BufferedImage.TYPE_INT_RGB);
            Graphics2D g = resizedImage.createGraphics();
            g.drawImage(cipherImage, 0, 0, newImageWidth, newImageHeight, null);
            g.dispose();
            cipherImgLabel.setIcon(new ImageIcon(resizedImage));
            cipherIconHeight = newImageHeight;
            cipherIconWidth = newImageWidth;
        }

    }//GEN-LAST:event_cipherZoomButtonActionPerformed

    private void cipherZoomOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cipherZoomOutButtonActionPerformed
        if (cipherIconHeight > 1 && cipherIconWidth > 2) {
            int newImageWidth = cipherIconWidth / 10;
            int newImageHeight = cipherIconHeight / 10;
            System.out.println(" " + newImageHeight);
            System.out.println(" " + newImageWidth);
            BufferedImage resizedImage = new BufferedImage(newImageWidth, newImageHeight, BufferedImage.TYPE_INT_RGB);
            Graphics2D g = resizedImage.createGraphics();
            g.drawImage(cipherImage, 0, 0, newImageWidth, newImageHeight, null);
            g.dispose();
            cipherImgLabel.setIcon(new ImageIcon(resizedImage));
            cipherIconHeight = newImageHeight;
            cipherIconWidth = newImageWidth;
        }
   }//GEN-LAST:event_cipherZoomOutButtonActionPerformed

    private void coverImgBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coverImgBrowseButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        //FileNameExtensionFilter filter = new FileNameExtensionFilter("JPG & PNG Images", "jpg", "png", "gif");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("PNG Images", "png");
        chooser.setFileFilter(filter);
        int option = chooser.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            coverImageFile = chooser.getSelectedFile();
            encryptButton.setEnabled(true);
            CoverImgFileTextField.setText(coverImageFile.getAbsolutePath());
        }

    }//GEN-LAST:event_coverImgBrowseButtonActionPerformed

    private void encryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptButtonActionPerformed
        String msg = ClientValidator.valiadateEncryption(encrTextField.getText(), coverImageFile, pXTextField.getText(), pYTextField.getText());
        if (msg.equals("")) {
            String textToEncrypt = encrTextField.getText();
            pX = Integer.parseInt(pXTextField.getText());
            pY = Integer.parseInt(pYTextField.getText());
            
            encryptor = new MetamorphicEncryptor(coverImageFile, pX, pY, textToEncrypt);
            cipherImage = encryptor.generateCipherImage();
            ImageIcon cipherImageIcon = new ImageIcon(cipherImage);
            cipherIconHeight = cipherImageIcon.getIconHeight();
            cipherIconWidth = cipherImageIcon.getIconWidth();
            cipherImgLabel.setIcon(cipherImageIcon);
            //Stegnography: Input -> cipher image     Output -> intermediate text
            String stegnographedStr = MetamorphicStegnographer.getStegnographedMessage(coverImageFile, cipherImage);
            interTextArea.setText(stegnographedStr);
            //Pradox Encryption: Input -> intermediate text     Output -> final ciphered image
            encryptor = new MetamorphicEncryptor(coverImageFile, pX, pY, stegnographedStr);
            finalImage = encryptor.generateCipherImage();

            //  ImageIO.write(cipherImage, "png", new File("CipherImager.png"));
            ImageIcon imageIcon = new ImageIcon(finalImage);
            finalImageH = imageIcon.getIconHeight();
            finalImageW = imageIcon.getIconWidth();
            finalImgLabel.setIcon(imageIcon);
            cipherZoomButton.setEnabled(true);
            cipherZoomOutButton.setEnabled(true);
            finalZoomButton.setEnabled(true);
            finalZoomOutButton.setEnabled(true);
            
        } else {
            JOptionPane.showMessageDialog(this, msg, "Composing Form", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_encryptButtonActionPerformed
    
    private void loadSenderData() {
        Object response = new ConnectToServer(AppConstants.GET_CLIENTS).sendRequestToServer(AppConstants.GET_CLIENTS);
        if (response instanceof ArrayList) {
            ArrayList clientList = (ArrayList) response;
            clientListComboBox.removeAllItems();
            clientListComboBox.addItem("Select");
            if (clientList.size() > 0) {
                for (Object clients : clientList) {
                    if (!clients.equals(AppVariables.userName)) {
                        clientListComboBox.addItem(clients);
                    }
                }
            }
        }
        
    }
    
    private String getDate() {
        SimpleDateFormat sdf = new SimpleDateFormat(AppConstants.DATE_FORMAT);
        return sdf.format(new Date());
    }
    
    public void showStatus(String FILE_TANSFER_COMPLETED) {
        JOptionPane.showMessageDialog(this, AppConstants.FILE_TANSFER_COMPLETED, "Composing Form", JOptionPane.INFORMATION_MESSAGE);
        this.dispose();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EncryptDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EncryptDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EncryptDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EncryptDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            public void run() {
                EncryptDialog dialog = new EncryptDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CoverImgFileTextField;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel cipherImgLabel;
    private javax.swing.JButton cipherZoomButton;
    private javax.swing.JButton cipherZoomOutButton;
    private javax.swing.JComboBox clientListComboBox;
    private javax.swing.JButton coverImgBrowseButton;
    private javax.swing.JTextField encrTextField;
    private javax.swing.JButton encryptButton;
    private javax.swing.JPanel encryptPanal;
    private javax.swing.JLabel finalImgLabel;
    private javax.swing.JButton finalZoomButton;
    private javax.swing.JButton finalZoomOutButton;
    private javax.swing.JTextArea interTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField pXTextField;
    private javax.swing.JTextField pYTextField;
    private javax.swing.JButton sendButton;
    // End of variables declaration//GEN-END:variables

    private BufferedImage getBufferedImage(File coverImageFile) {
        Image finalBuf = null;
        try {
            final float FACTOR = 4f;
            BufferedImage img = ImageIO.read(coverImageFile);
            int scaleX = (int) (img.getWidth() * FACTOR);
            int scaleY = (int) (img.getHeight() * FACTOR);
            Image image = img.getScaledInstance(scaleX, scaleY, Image.SCALE_SMOOTH);
            finalBuf = toBufferedImage(image);
            //finalBuffer = (BufferedImage) finalImage;
        } catch (IOException ex) {
            Logger.getLogger(EncryptDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        return (BufferedImage) finalBuf;
    }
    
    public static BufferedImage toBufferedImage(Image img) {
        if (img instanceof BufferedImage) {
            return (BufferedImage) img;
        }

        // Create a buffered image with transparency
        BufferedImage bimage = new BufferedImage(img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB);

        // Draw the image on to the buffered image
        Graphics2D bGr = bimage.createGraphics();
        bGr.drawImage(img, 0, 0, null);
        bGr.dispose();

        // Return the buffered image
        return bimage;
    }
}
